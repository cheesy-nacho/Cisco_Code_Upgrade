---
## Ansible Playbook to copy image, change boot variable, save config
## Will work with 2960x model switches also on stacks

- name: Begin Code Upload
  hosts: office
  connection: local
  gather_facts: false 
  ignore_unreachable: true
  vars_files:
    - vault.yml
  vars:
    ansible_network_cli_ssh_type: libssh
    cli:
      username: "{{ username }}"
      password: "{{ password }}"
      
## Variables for new code
    upgrade_ios_version: 15.2(7)E10
    target_image: c2960x-universalk9-mz.152-7.E7.bin
    ios_md5: 1b3781db619dcce6a2677628acc15439
    ios_size_kb: 26787 # Must be defined in kb
    flash_dir: 'flash:' # e.g: 'bootflash' or 'flash:'
    switch_model: WS-C2960X  # Add for longer match

  
  tasks:

## Get current version
      - name: Get Version
        cisco.ios.ios_facts:
          gather_subset: hardware
        register: version

## Check hardware model
      - block:
        - name: Check switch model
          debug:
            msg: "Switch model: {{ version.ansible_facts.ansible_net_model }} -- Wrong switch model - skipping host"
        - meta: end_host
        when: switch_model not in ansible_net_model

## Check if switch is already upgraded
      - block:
        - name: Check if switch is already upgraded
          debug:
            msg: "Current version: {{ version.ansible_facts.ansible_net_version }} -- Switch is already upgraded"
        - meta: end_host
        when: ansible_net_version == upgrade_ios_version

## Check disk space. Place book will stop if there isn't sufficent disk space. 
      - block:
        - name: Check flash space for upload
          debug:
            msg: "Not enough space in device's flash - skipping host"
        - meta: end_host
        when:  ios_size_kb > ansible_net_filesystems_info['flash:'].spacefree_kb

## Is image present
      - name: Is Image present
        cisco.ios.ios_command:
          commands: "dir all-filesystems | in {{ target_image }}"
        register: image_present

## Enable SCP
      - name: Enable SCP on switch
        cisco.ios.ios_config: 
          lines: 
            - ip scp server enable
        when: image_present.stdout[0] == ""

## Check availability of flashs
      - name: Check availability of flash
        cisco.ios.ios_command:
          commands: "show file systems | include flash"
        register: flash_values

## Check whether IOS is already in flash
      - name: Check if IOS is already present on the flash1
        cisco.ios.ios_command:
          commands: "show flash1: | include {{ target_image }}"
        register: ios_in_flash1
        when: 
          - target_image not in image_present
          - "'flash1:' in flash_values.stdout[0]"          


      - name: Check if IOS is already present on the flash2
        cisco.ios.ios_command:
          commands: "show flash2: | include {{ target_image }}"
        register: ios_in_flash2
        when:   
          - target_image not in image_present
          - "'flash2:' in flash_values.stdout[0]"                             


      - name: Check if IOS is already present on the flash3
        cisco.ios.ios_command:
          commands: "show flash3: | include {{ target_image }}"
        register: ios_in_flash3
        when:   
          - target_image not in image_present
          - "'flash3:' in flash_values.stdout[0]"                          


      - name: Check if IOS is already present on the flash4
        cisco.ios.ios_command:
          commands: "show flash4: | include {{ target_image }}"
        register: ios_in_flash4
        when:   
          - target_image not in image_present
          - "'flash4:' in flash_values.stdout[0]"                      


## Copy new IOS to target device 
      - name: Copy new IOS to target device flash1 - This will take a few minutes. 
        block:
        - name: Copy new IOS to target device flash1 - This will take a few minutes. 
          net_put: 
            src: "/home/HT_Ansible_Demo/images/{{ target_image }}"
            dest: "flash1:/{{ target_image }}"
          vars:
              ansible_command_timeout: 600
          when:
            - target_image not in ios_in_flash1.stdout[0]
        when:
          - "'flash1:' in flash_values.stdout[0]"                          


      - name: Copy new IOS to target device flash2 - This will take a few minutes. 
        block:
        - name: Copy new IOS to target device flash2 - This will take a few minutes. 
          net_put: 
            src: "/home/HT_Ansible_Demo/images/{{ target_image }}"
            dest: "flash2:/{{ target_image }}"
          vars:
              ansible_command_timeout: 600
          when:
            - target_image not in ios_in_flash2.stdout[0]
        when:
          - "'flash2:' in flash_values.stdout[0]"                                           


      - name: Copy new IOS to target device flash3 - This will take a few minutes. 
        block:
        - name: Copy new IOS to target device flash3 - This will take a few minutes. 
          net_put: 
            src: "/home/HT_Ansible_Demo/images/{{ target_image }}"
            dest: "flash3:/{{ target_image }}"
          vars:
              ansible_command_timeout: 600
          when:
            - target_image not in ios_in_flash3.stdout[0]
        when:
          - "'flash3:' in flash_values.stdout[0]"                                          


      - name: Copy new IOS to target device flash4 - This will take a few minutes. 
        block:
        - name: Copy new IOS to target device flash4 - This will take a few minutes. 
          net_put: 
            src: "/home/HT_Ansible_Demo/images/{{ target_image }}"
            dest: "flash4:/{{ target_image }}"
          vars:
              ansible_command_timeout: 600
          when:
            - target_image not in ios_in_flash4.stdout[0]
        when:
          - "'flash4:' in flash_values.stdout[0]"                                          

## Updated check if new image is present
      - name: Is Image present update
        cisco.ios.ios_command:
          #commands: "dir {{ flash_dir }} | inc {{ target_image }}"
          commands: "dir all-filesystems | in {{ target_image }}" 
        register: image_present_update

## Validate MD5
      - name: Image MD5 Validation_1
        block:
        - name: Check MD5 on flash1 
          cisco.ios.ios_command:
            commands: 
              - "verify /md5 flash1:{{ target_image }}"
            wait_for: 
              - result[0] contains =
          vars:
            ansible_command_timeout: 60
          register: image_validation_result_1
          when: target_image in image_present_update.stdout[0]
        when:
          - "'flash1:' in flash_values.stdout[0]"                          


      - name: Image MD5 Validation_2
        block:
        - name: Check MD5 on flash2 
          cisco.ios.ios_command:
            commands: 
              - "verify /md5 flash2:{{ target_image }}"
            wait_for: 
              - result[0] contains =
          vars:
            ansible_command_timeout: 60
          register: image_validation_result_2
          when: target_image in image_present_update.stdout[0]
        when:
          - "'flash2:' in flash_values.stdout[0]"                                           

      - name: Image MD5 Validation_3
        block:
        - name: Check MD5 on flash3 
          cisco.ios.ios_command:
            commands: 
              - "verify /md5 flash3:{{ target_image }}"
            wait_for: 
              - result[0] contains =
          vars:
            ansible_command_timeout: 60
          register: image_validation_result_3
          when: target_image in image_present_update.stdout[0]
        when:
          - "'flash3:' in flash_values.stdout[0]"                                          

      - name: Image MD5 Validation_4
        block:
        - name: Check MD5 on flash4  
          cisco.ios.ios_command:
            commands: 
              - "verify /md5 flash4:{{ target_image }}"
            wait_for: 
              - result[0] contains =
          vars:
            ansible_command_timeout: 60
          register: image_validation_result_4
          when: target_image in image_present_update.stdout[0]
        when:
          - "'flash4:' in flash_values.stdout[0]" 

## Debug for MD5 validation
      - block:
        - name: MD5 Valid flash1
          debug:
            msg: " {{ ansible_net_hostname }} - MD5 is valid"
          when: image_validation_result_1.stdout[0].split(' = ')[1] == ios_md5

        - block:
          - name: MD5 Invalid flash1
            debug:
              msg: " {{ ansible_net_hostname }} - MD5 is Invalid, Stopping upgrade !!"
          - meta: end_host
          when: image_validation_result_1.stdout[0].split(' = ')[1] != ios_md5
        when: "'flash1:' in flash_values.stdout[0]" 

      - block:
        - name: MD5 Valid flash2
          debug:
            msg: " {{ ansible_net_hostname }} - MD5 is valid"
          when: image_validation_result_2.stdout[0].split(' = ')[1] == ios_md5

        - block:
          - name: MD5 Invalid flash2
            debug:
              msg: " {{ ansible_net_hostname }} - MD5 is Invalid, Stopping upgrade !!"
          - meta: end_host
          when: image_validation_result_2.stdout[0].split(' = ')[1] != ios_md5
        when: "'flash2:' in flash_values.stdout[0]" 

      - block:
        - name: MD5 Valid flash3
          debug:
            msg: " {{ ansible_net_hostname }} - MD5 is valid"
          when: image_validation_result_3.stdout[0].split(' = ')[1] == ios_md5

        - block:
          - name: MD5 Invalid flash3
            debug:
              msg: " {{ ansible_net_hostname }} - MD5 is Invalid, Stopping upgrade !!"
          - meta: end_host
          when: image_validation_result_3.stdout[0].split(' = ')[1] != ios_md5
        when: "'flash3:' in flash_values.stdout[0]" 

      - block:
        - name: MD5 Valid flash4
          debug:
            msg: " {{ ansible_net_hostname }} - MD5 is valid"
          when: image_validation_result_4.stdout[0].split(' = ')[1] == ios_md5

        - block:
          - name: MD5 Invalid flash4
            debug:
              msg: " {{ ansible_net_hostname }} - MD5 is Invalid, Stopping upgrade !!"
          - meta: end_host
          when: image_validation_result_4.stdout[0].split(' = ')[1] != ios_md5
        when: "'flash4:' in flash_values.stdout[0]" 


## Change the Boot Variable to the new image  
      - name: Change Boot Variable to new image
        cisco.ios.ios_config:
          lines:
            - boot system switch all {{ flash_dir }}/{{ target_image }}
          save_when: always
        when: target_image in image_present_update.stdout[0]
      - name: Boot var changed
        debug: 
          msg: " Boot var changed to - {{ target_image }}"

...